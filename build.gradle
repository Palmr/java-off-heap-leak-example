plugins {
    id 'idea'
    id 'java'
    id 'application'
}

group 'uk.co.palmr'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

subprojects.each {
    subproject -> evaluationDependsOn(subproject.path)
}

assemble.doFirst {
    project(':QuestionableJniLib').assemble
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile project(':QuestionableJniLib')
}

applicationName = 'OffHeapLeakExample'
mainClassName = "uk.co.palmr.offheapleakexample.Main"
applicationDefaultJvmArgs = [
        '-Xms32m',
        '-Xmx32m',
        '-XX:NativeMemoryTracking=detail',
        '-Dlog4j.configurationFile=resources/log4j.properties'
]

startScripts {
    doLast {
        def newEnvVars = "# Use jemalloc instead of glibc\n" +
                "export LD_PRELOAD=`jemalloc-config --libdir`/libjemalloc.so.`jemalloc-config --revision`\n" +
                "\n" +
                "# Use jemalloc profiling, memory profile dump every 30 mB, allocation sample every 128 kB\n" +
                "export MALLOC_CONF=prof:true,lg_prof_interval:25,lg_prof_sample:17"
        unixScript.text = unixScript.text.replace("MAX_FD=\"maximum\"", "MAX_FD=\"maximum\"\n\n$newEnvVars")
    }
}

distributions {
    main {
        contents {
            from('src/main/resources') {
                into {'resources'}
            }
            from('QuestionableJniLib/build/libs/questionableJniLib/shared/libQuestionableJniLib.so') {
                into {'lib'}
            }
            from('src/main/scripts') {
                into {'bin'}
            }
        }
    }
}